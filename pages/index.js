import Head from 'next/head';
import { useMemo, useState } from 'react';
import {
  Box,
  Button,
  Checkbox,
  Flex,
  Heading,
  HStack,
  Input,
  List,
  ListItem,
  Radio,
  RadioGroup,
  Spinner,
  Stack,
  Text,
} from '@chakra-ui/react';
import { useDispatch, useSelector } from 'react-redux';
import {
  addTodoItem,
  loadTodos,
  removeTodoItem,
  saveTodos,
  toggleTodoItem,
} from '../src/actions/todoActions';
import { switchFilter } from '../src/actions/filterActions';

const Home = () => {
  const [todoInput, setTodoInput] = useState('');

  const dispatch = useDispatch();
  const items = useSelector((state) => state.todos.items);
  const filterSelction = useSelector((state) => state.filters.selection);
  const isFetching = useSelector((state) => state.todos.isFetching);

  const filteredItems = useMemo(() => {
    switch (filterSelction) {
      case 'completed': {
        return items.filter((item) => item.completed);
      }
      case 'uncompleted': {
        return items.filter((item) => !item.completed);
      }
      default: {
        return items;
      }
    }
  }, [items, filterSelction]);

  const handleAdd = (e) => {
    e.preventDefault();
    if (todoInput) {
      dispatch(addTodoItem({ text: todoInput }));
    }
    setTodoInput('');
  };

  const handleCheck = (e) => {
    dispatch(toggleTodoItem(e.target.value));
  };

  const handleRemove = (e) => {
    dispatch(removeTodoItem(e.target.value));
  };

  const handleFilterSelect = (value) => {
    dispatch(switchFilter(value));
  };

  const handleSave = () => {
    dispatch(saveTodos());
  };

  const handleLoad = () => {
    dispatch(loadTodos());
  };

  return (
    <div>
      <Head>
        <title>Redux Demo App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Heading>Redux Example Todo App</Heading>
      <Box p="8">
        <form onSubmit={handleAdd}>
          <HStack mb="4">
            <Input
              type="text"
              placeholder="What do you need to do?"
              w="400px"
              value={todoInput}
              onChange={(e) => setTodoInput(e.target.value)}
            />
            <Button type="submit">Add</Button>
          </HStack>
        </form>
        <Stack>
          <Box>
            <Flex>
              <Heading size="md" mb="2" mr="8">
                List of Todos:
              </Heading>
              {isFetching && <Spinner />}
            </Flex>
            <List spacing="2" ml="4">
              {filteredItems.length > 0 ? (
                filteredItems.map((item) => (
                  <ListItem key={item.id} display="flex">
                    <Checkbox
                      isChecked={item.completed}
                      mr="2"
                      value={item.id}
                      onChange={handleCheck}
                    >
                      <Text textDecoration={item.completed ? 'line-through' : 'none'}>
                        {item.text}
                      </Text>
                    </Checkbox>
                    <Button
                      size="xs"
                      colorScheme="pink"
                      variant="ghost"
                      value={item.id}
                      onClick={handleRemove}
                    >
                      Remove
                    </Button>
                  </ListItem>
                ))
              ) : (
                <Text>Nothing to see here</Text>
              )}
            </List>
          </Box>
          <Box>
            <Heading size="md" mb="2">
              Filter:
            </Heading>
            <RadioGroup name="filter" value={filterSelction} onChange={handleFilterSelect}>
              <HStack spacing="8">
                <Radio id="radio-all" value="all">
                  All
                </Radio>
                <Radio id="radio-completed" value="completed">
                  Completed
                </Radio>
                <Radio id="radio-uncompleted" value="uncompleted">
                  Uncompleted
                </Radio>
              </HStack>
            </RadioGroup>
          </Box>
          <Box>
            <Heading size="md" mb="2">
              Save/Load:
            </Heading>
            <HStack spacing="8">
              <Button colorScheme="green" size="sm" onClick={handleSave} isDisabled={isFetching}>
                Save
              </Button>
              <Button colorScheme="yellow" size="sm" onClick={handleLoad} isDisabled={isFetching}>
                Load
              </Button>
            </HStack>
          </Box>
        </Stack>
      </Box>
    </div>
  );
};

export default Home;
